//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Demo_Project
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;
    using Microsoft.VisualStudio.TestTools.WebTesting.RequestPlugins;
    using Microsoft.SystemCenter.Cloud.GsmPlugins;


    [DeploymentItem("demo_project\\LoginCredentials.csv", "demo_project")]
    [DataSource("LoginCredentials", "Microsoft.VisualStudio.TestTools.DataSource.CSV", "|DataDirectory|\\demo_project\\LoginCredentials.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Sequential, Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "LoginCredentials#csv")]
    [DataBinding("LoginCredentials", "LoginCredentials#csv", "Unsername", "LoginCredentials.LoginCredentials#csv.Unsername")]
    [DataBinding("LoginCredentials", "LoginCredentials#csv", "password", "LoginCredentials.LoginCredentials#csv.password")]
    public class HP_Web_TourCoded : WebTest
    {

        private DateTimeWebTestPlugin testPlugin0 = new DateTimeWebTestPlugin();

        private DateTimeWebTestPlugin testPlugin1 = new DateTimeWebTestPlugin();

        private RandomIntGeneratorWebTestPlugin testPlugin2 = new RandomIntGeneratorWebTestPlugin();

        public HP_Web_TourCoded()
        {
            this.PreAuthenticate = true;
            this.Proxy = "default";
            this.StopOnError = true;
            this.testPlugin0.AddDays = 0;
            this.testPlugin0.AddHours = 0;
            this.testPlugin0.AddMilliseconds = 0;
            this.testPlugin0.AddMinutes = 0;
            this.testPlugin0.AddMonths = 0;
            this.testPlugin0.AddSeconds = 0;
            this.testPlugin0.AddYears = 0;
            this.testPlugin0.ContextParameterName = "p_Date";
            this.testPlugin0.InputDateTime = "";
            this.testPlugin0.OutputFormat = "MM/dd/yyyy";
            this.testPlugin0.OutputJsonDateTime = false;
            this.testPlugin0.UseCurrentTime = true;
            this.testPlugin0.UseLocalTime = false;
            this.PreWebTest += new EventHandler<PreWebTestEventArgs>(this.testPlugin0.PreWebTest);
            this.PostWebTest += new EventHandler<PostWebTestEventArgs>(this.testPlugin0.PostWebTest);
            this.PreTransaction += new EventHandler<PreTransactionEventArgs>(this.testPlugin0.PreTransaction);
            this.PostTransaction += new EventHandler<PostTransactionEventArgs>(this.testPlugin0.PostTransaction);
            this.PrePage += new EventHandler<PrePageEventArgs>(this.testPlugin0.PrePage);
            this.PostPage += new EventHandler<PostPageEventArgs>(this.testPlugin0.PostPage);
            this.testPlugin1.AddDays = 1;
            this.testPlugin1.AddHours = 0;
            this.testPlugin1.AddMilliseconds = 0;
            this.testPlugin1.AddMinutes = 0;
            this.testPlugin1.AddMonths = 0;
            this.testPlugin1.AddSeconds = 0;
            this.testPlugin1.AddYears = 0;
            this.testPlugin1.ContextParameterName = "p_ReturnDate";
            this.testPlugin1.InputDateTime = "";
            this.testPlugin1.OutputFormat = "MM/dd/yyyy";
            this.testPlugin1.OutputJsonDateTime = false;
            this.testPlugin1.UseCurrentTime = true;
            this.testPlugin1.UseLocalTime = false;
            this.PreWebTest += new EventHandler<PreWebTestEventArgs>(this.testPlugin1.PreWebTest);
            this.PostWebTest += new EventHandler<PostWebTestEventArgs>(this.testPlugin1.PostWebTest);
            this.PreTransaction += new EventHandler<PreTransactionEventArgs>(this.testPlugin1.PreTransaction);
            this.PostTransaction += new EventHandler<PostTransactionEventArgs>(this.testPlugin1.PostTransaction);
            this.PrePage += new EventHandler<PrePageEventArgs>(this.testPlugin1.PrePage);
            this.PostPage += new EventHandler<PostPageEventArgs>(this.testPlugin1.PostPage);
            this.testPlugin2.ContextParameterName = "p_RandomNumber";
            this.testPlugin2.MaxValue = 7;
            this.testPlugin2.MinValue = 0;
            this.PreWebTest += new EventHandler<PreWebTestEventArgs>(this.testPlugin2.PreWebTest);
            this.PostWebTest += new EventHandler<PostWebTestEventArgs>(this.testPlugin2.PostWebTest);
            this.PreTransaction += new EventHandler<PreTransactionEventArgs>(this.testPlugin2.PreTransaction);
            this.PostTransaction += new EventHandler<PostTransactionEventArgs>(this.testPlugin2.PostTransaction);
            this.PrePage += new EventHandler<PrePageEventArgs>(this.testPlugin2.PrePage);
            this.PostPage += new EventHandler<PostPageEventArgs>(this.testPlugin2.PostPage);
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            // Initialize validation rules that apply to all requests in the WebTest
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidateResponseUrl validationRule1 = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidationRuleResponseTimeGoal validationRule2 = new ValidationRuleResponseTimeGoal();
                validationRule2.Tolerance = 0D;
                this.ValidateResponseOnPageComplete += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }
            this.PreRequestDataBinding += new EventHandler<PreRequestDataBindingEventArgs>(this.testPlugin0.PreRequestDataBinding);
            this.PreRequest += new EventHandler<PreRequestEventArgs>(this.testPlugin0.PreRequest);
            this.PostRequest += new EventHandler<PostRequestEventArgs>(this.testPlugin0.PostRequest);
            this.PreRequestDataBinding += new EventHandler<PreRequestDataBindingEventArgs>(this.testPlugin1.PreRequestDataBinding);
            this.PreRequest += new EventHandler<PreRequestEventArgs>(this.testPlugin1.PreRequest);
            this.PostRequest += new EventHandler<PostRequestEventArgs>(this.testPlugin1.PostRequest);
            this.PreRequestDataBinding += new EventHandler<PreRequestDataBindingEventArgs>(this.testPlugin2.PreRequestDataBinding);
            this.PreRequest += new EventHandler<PreRequestEventArgs>(this.testPlugin2.PreRequest);
            this.PostRequest += new EventHandler<PostRequestEventArgs>(this.testPlugin2.PostRequest);

            // Launch_App
            this.AddCommentToResult("Launch_App");

            this.BeginTransaction("TC01_01_Launch_App");

            WebTestRequest request1 = new WebTestRequest("http://10.91.1.159:1080/WebTours/");
            yield return request1;
            request1 = null;

            WebTestRequest request2 = new WebTestRequest("http://10.91.1.159:1080/WebTours/header.html");
            request2.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/WebTours/"));
            yield return request2;
            request2 = null;

            WebTestRequest request3 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/welcome.pl");
            request3.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/WebTours/"));
            request3.QueryStringParameters.Add("signOff", "true", false, false);
            yield return request3;
            request3 = null;

            WebTestRequest request4 = new WebTestRequest("http://10.91.1.159:1080/WebTours/home.html");
            request4.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/welcome.pl?signOff=true"));
            yield return request4;
            request4 = null;

            WebTestRequest request5 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/nav.pl");
            request5.ThinkTime = 16;
            request5.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/welcome.pl?signOff=true"));
            request5.QueryStringParameters.Add("in", "home", false, false);
            ExtractHiddenFields extractionRule1 = new ExtractHiddenFields();
            extractionRule1.Required = true;
            extractionRule1.HtmlDecode = true;
            extractionRule1.ContextParameterName = "1";
            request5.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule1.Extract);
            yield return request5;
            request5 = null;

            this.EndTransaction("TC01_01_Launch_App");

            // Login
            this.AddCommentToResult("Login");

            this.BeginTransaction("TC01_02_Login");

            WebTestRequest request6 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/login.pl");
            request6.Method = "POST";
            request6.Encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            request6.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/nav.pl?in=home"));
            FormPostHttpBody request6Body = new FormPostHttpBody();
            request6Body.FormPostParameters.Add("userSession", this.Context["$HIDDEN1.userSession"].ToString());
            request6Body.FormPostParameters.Add("username", this.Context["LoginCredentials.LoginCredentials#csv.Unsername"].ToString());
            request6Body.FormPostParameters.Add("password", this.Context["LoginCredentials.LoginCredentials#csv.password"].ToString());
            request6Body.FormPostParameters.Add("JSFormSubmit", this.Context["$HIDDEN1.JSFormSubmit"].ToString());
            request6Body.FormPostParameters.Add("login.x", "57");
            request6Body.FormPostParameters.Add("login.y", "6");
            request6.Body = request6Body;
            yield return request6;
            request6 = null;

            WebTestRequest request7 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/nav.pl");
            request7.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/login.pl"));
            request7.QueryStringParameters.Add("page", "menu", false, false);
            request7.QueryStringParameters.Add("in", "home", false, false);
            yield return request7;
            request7 = null;

            WebTestRequest request8 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/login.pl");
            request8.ThinkTime = 9;
            request8.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/login.pl"));
            request8.QueryStringParameters.Add("intro", "true", false, false);
            yield return request8;
            request8 = null;

            this.EndTransaction("TC01_02_Login");

            // Click_Flight
            this.AddCommentToResult("Click_Flight");

            this.BeginTransaction("TC01_03_Click_Flight");

            WebTestRequest request9 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/welcome.pl");
            request9.Encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            request9.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/nav.pl?page=menu&in=home"));
            request9.QueryStringParameters.Add("page", "search", false, false);
            yield return request9;
            request9 = null;

            WebTestRequest request10 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/nav.pl");
            request10.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/welcome.pl?page=search"));
            request10.QueryStringParameters.Add("page", "menu", false, false);
            request10.QueryStringParameters.Add("in", "flights", false, false);
            yield return request10;
            request10 = null;

            WebTestRequest request11 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/reservations.pl");
            request11.ThinkTime = 29;
            request11.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/welcome.pl?page=search"));
            request11.QueryStringParameters.Add("page", "welcome", false, false);
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule3 = new ValidationRuleFindText();
                validationRule3.FindText = "Find Flight";
                validationRule3.IgnoreCase = false;
                validationRule3.UseRegularExpression = false;
                validationRule3.PassIfTextFound = true;
                request11.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule3.Validate);
            }
            ExtractHiddenFields extractionRule2 = new ExtractHiddenFields();
            extractionRule2.Required = true;
            extractionRule2.HtmlDecode = true;
            extractionRule2.ContextParameterName = "1";
            request11.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule2.Extract);
            ExtractRegularExpression extractionRule3 = new ExtractRegularExpression();
            extractionRule3.RegularExpression = "<option value=\"(.*?)\"";
            extractionRule3.IgnoreCase = false;
            extractionRule3.Required = true;
            extractionRule3.Index = int.Parse(this.Context["p_RandomNumber"].ToString());
            extractionRule3.HtmlDecode = true;
            extractionRule3.UseGroups = true;
            extractionRule3.ContextParameterName = "c_FromCity";
            request11.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule3.Extract);
            yield return request11;
            request11 = null;

            this.EndTransaction("TC01_03_Click_Flight");

            // Find_Flight_Continue
            this.AddCommentToResult("Find_Flight_Continue");

            this.BeginTransaction("TC01_04_Find_Flight_Continue");

            WebTestRequest request12 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/reservations.pl");
            request12.ThinkTime = 10;
            request12.Method = "POST";
            request12.Encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            request12.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/reservations.pl?page=welcome"));
            FormPostHttpBody request12Body = new FormPostHttpBody();
            request12Body.FormPostParameters.Add("advanceDiscount", this.Context["$HIDDEN1.advanceDiscount"].ToString());
            request12Body.FormPostParameters.Add("depart", this.Context["c_FromCity"].ToString());
            request12Body.FormPostParameters.Add("departDate", this.Context["p_Date"].ToString());
            request12Body.FormPostParameters.Add("arrive", "Paris");
            request12Body.FormPostParameters.Add("returnDate", this.Context["p_ReturnDate"].ToString());
            request12Body.FormPostParameters.Add("numPassengers", "1");
            request12Body.FormPostParameters.Add("seatPref", "None");
            request12Body.FormPostParameters.Add("seatType", "Coach");
            request12Body.FormPostParameters.Add(".cgifields", this.Context["$HIDDEN1..cgifields"].ToString());
            request12Body.FormPostParameters.Add(".cgifields", this.Context["$HIDDEN1..cgifields"].ToString());
            request12Body.FormPostParameters.Add(".cgifields", this.Context["$HIDDEN1..cgifields"].ToString());
            request12Body.FormPostParameters.Add("findFlights.x", "52");
            request12Body.FormPostParameters.Add("findFlights.y", "9");
            request12.Body = request12Body;
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule4 = new ValidationRuleFindText();
                validationRule4.FindText = "Find Flight";
                validationRule4.IgnoreCase = false;
                validationRule4.UseRegularExpression = false;
                validationRule4.PassIfTextFound = true;
                request12.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule4.Validate);
            }
            ExtractHiddenFields extractionRule4 = new ExtractHiddenFields();
            extractionRule4.Required = true;
            extractionRule4.HtmlDecode = true;
            extractionRule4.ContextParameterName = "1";
            request12.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule4.Extract);
            yield return request12;
            request12 = null;

            this.EndTransaction("TC01_04_Find_Flight_Continue");

            // Select_Flight_Continue
            this.AddCommentToResult("Select_Flight_Continue");

            this.BeginTransaction("TC01_05_Select_Flight_Continue");

            WebTestRequest request13 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/reservations.pl");
            request13.ThinkTime = 6;
            request13.Method = "POST";
            request13.Encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            request13.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/reservations.pl"));
            FormPostHttpBody request13Body = new FormPostHttpBody();
            request13Body.FormPostParameters.Add("outboundFlight", ("141;114;" + this.Context["p_Date"].ToString()));
            request13Body.FormPostParameters.Add("numPassengers", this.Context["$HIDDEN1.numPassengers"].ToString());
            request13Body.FormPostParameters.Add("advanceDiscount", this.Context["$HIDDEN1.advanceDiscount"].ToString());
            request13Body.FormPostParameters.Add("seatType", this.Context["$HIDDEN1.seatType"].ToString());
            request13Body.FormPostParameters.Add("seatPref", this.Context["$HIDDEN1.seatPref"].ToString());
            request13Body.FormPostParameters.Add("reserveFlights.x", "71");
            request13Body.FormPostParameters.Add("reserveFlights.y", "10");
            request13.Body = request13Body;
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule5 = new ValidationRuleFindText();
                validationRule5.FindText = "Payment Details";
                validationRule5.IgnoreCase = false;
                validationRule5.UseRegularExpression = false;
                validationRule5.PassIfTextFound = true;
                request13.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule5.Validate);
            }
            ExtractHiddenFields extractionRule5 = new ExtractHiddenFields();
            extractionRule5.Required = true;
            extractionRule5.HtmlDecode = true;
            extractionRule5.ContextParameterName = "1";
            request13.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule5.Extract);
            yield return request13;
            request13 = null;

            this.EndTransaction("TC01_05_Select_Flight_Continue");

            // Payment_Details_Continue
            this.AddCommentToResult("Payment_Details_Continue");

            this.BeginTransaction("TC01_06_Payment_Details_Continue");

            WebTestRequest request14 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/reservations.pl");
            request14.ThinkTime = 11;
            request14.Method = "POST";
            request14.Encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            request14.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/reservations.pl"));
            FormPostHttpBody request14Body = new FormPostHttpBody();
            request14Body.FormPostParameters.Add("firstName", "Anirudha");
            request14Body.FormPostParameters.Add("lastName", "Sahoo");
            request14Body.FormPostParameters.Add("address1", "Bangalore");
            request14Body.FormPostParameters.Add("address2", "Karnataka");
            request14Body.FormPostParameters.Add("pass1", "Anirudha Sahoo");
            request14Body.FormPostParameters.Add("creditCard", "");
            request14Body.FormPostParameters.Add("expDate", "");
            request14Body.FormPostParameters.Add("oldCCOption", this.Context["$HIDDEN1.oldCCOption"].ToString());
            request14Body.FormPostParameters.Add("numPassengers", this.Context["$HIDDEN1.numPassengers"].ToString());
            request14Body.FormPostParameters.Add("seatType", this.Context["$HIDDEN1.seatType"].ToString());
            request14Body.FormPostParameters.Add("seatPref", this.Context["$HIDDEN1.seatPref"].ToString());
            request14Body.FormPostParameters.Add("outboundFlight", this.Context["$HIDDEN1.outboundFlight"].ToString());
            request14Body.FormPostParameters.Add("advanceDiscount", this.Context["$HIDDEN1.advanceDiscount"].ToString());
            request14Body.FormPostParameters.Add("returnFlight", this.Context["$HIDDEN1.returnFlight"].ToString());
            request14Body.FormPostParameters.Add("JSFormSubmit", this.Context["$HIDDEN1.JSFormSubmit"].ToString());
            request14Body.FormPostParameters.Add(".cgifields", this.Context["$HIDDEN1..cgifields"].ToString());
            request14Body.FormPostParameters.Add("buyFlights.x", "54");
            request14Body.FormPostParameters.Add("buyFlights.y", "10");
            request14.Body = request14Body;
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule6 = new ValidationRuleFindText();
                validationRule6.FindText = "Thank you for booking through Web Tours.";
                validationRule6.IgnoreCase = false;
                validationRule6.UseRegularExpression = false;
                validationRule6.PassIfTextFound = true;
                request14.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule6.Validate);
            }
            yield return request14;
            request14 = null;

            this.EndTransaction("TC01_06_Payment_Details_Continue");

            // Click_Itinerary
            this.AddCommentToResult("Click_Itinerary");

            this.BeginTransaction("TC01_07_Click_Itinerary");

            WebTestRequest request15 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/welcome.pl");
            request15.Encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            request15.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/nav.pl?page=menu&in=flights"));
            request15.QueryStringParameters.Add("page", "itinerary", false, false);
            yield return request15;
            request15 = null;

            WebTestRequest request16 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/itinerary.pl");
            request16.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/welcome.pl?page=itinerary"));
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule7 = new ValidationRuleFindText();
                validationRule7.FindText = "Itinerary";
                validationRule7.IgnoreCase = false;
                validationRule7.UseRegularExpression = false;
                validationRule7.PassIfTextFound = true;
                request16.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule7.Validate);
            }
            ExtractHiddenFields extractionRule6 = new ExtractHiddenFields();
            extractionRule6.Required = true;
            extractionRule6.HtmlDecode = true;
            extractionRule6.ContextParameterName = "1";
            request16.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule6.Extract);
            ExtractText extractionRule7 = new ExtractText();
            extractionRule7.StartsWith = "name=\"flightID\" value=\"";
            extractionRule7.EndsWith = "\"  />";
            extractionRule7.IgnoreCase = false;
            extractionRule7.UseRegularExpression = false;
            extractionRule7.Required = true;
            extractionRule7.ExtractRandomMatch = false;
            extractionRule7.Index = 0;
            extractionRule7.HtmlDecode = true;
            extractionRule7.SearchInHeaders = false;
            extractionRule7.ContextParameterName = "c_FlightCancelID";
            request16.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule7.Extract);
            yield return request16;
            request16 = null;

            WebTestRequest request17 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/nav.pl");
            request17.ThinkTime = 19;
            request17.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/welcome.pl?page=itinerary"));
            request17.QueryStringParameters.Add("page", "menu", false, false);
            request17.QueryStringParameters.Add("in", "itinerary", false, false);
            yield return request17;
            request17 = null;

            this.EndTransaction("TC01_07_Click_Itinerary");

            // Cancel_Flight
            this.AddCommentToResult("Cancel_Flight");

            this.BeginTransaction("TC01_08_Cancel_Flight");

            WebTestRequest request18 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/itinerary.pl");
            request18.ThinkTime = 14;
            request18.Method = "POST";
            request18.Encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            request18.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/itinerary.pl"));
            FormPostHttpBody request18Body = new FormPostHttpBody();
            request18Body.FormPostParameters.Add("1", "on");
            request18Body.FormPostParameters.Add("flightID", this.Context["c_FlightCancelID"].ToString());
            request18Body.FormPostParameters.Add(".cgifields", this.Context["$HIDDEN1..cgifields"].ToString());
            request18Body.FormPostParameters.Add("removeFlights.x", "41");
            request18Body.FormPostParameters.Add("removeFlights.y", "9");
            request18.Body = request18Body;
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.High))
            {
                ValidationRuleFindText validationRule8 = new ValidationRuleFindText();
                validationRule8.FindText = "Itinerary";
                validationRule8.IgnoreCase = false;
                validationRule8.UseRegularExpression = false;
                validationRule8.PassIfTextFound = true;
                request18.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule8.Validate);
            }
            yield return request18;
            request18 = null;

            this.EndTransaction("TC01_08_Cancel_Flight");

            // Signoff
            this.AddCommentToResult("Signoff");

            this.BeginTransaction("TC01_09_Signoff");

            WebTestRequest request19 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/welcome.pl");
            request19.Encoding = System.Text.Encoding.GetEncoding("iso-8859-1");
            request19.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/nav.pl?page=menu&in=itinerary"));
            request19.QueryStringParameters.Add("signOff", "1", false, false);
            yield return request19;
            request19 = null;

            WebTestRequest request20 = new WebTestRequest("http://10.91.1.159:1080/WebTours/home.html");
            request20.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/welcome.pl?signOff=1"));
            yield return request20;
            request20 = null;

            WebTestRequest request21 = new WebTestRequest("http://10.91.1.159:1080/cgi-bin/nav.pl");
            request21.Headers.Add(new WebTestRequestHeader("Referer", "http://10.91.1.159:1080/cgi-bin/welcome.pl?signOff=1"));
            request21.QueryStringParameters.Add("in", "home", false, false);
            yield return request21;
            request21 = null;

            this.EndTransaction("TC01_09_Signoff");
        }
    }
}
